import pandas as pd
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt
import seaborn as sns

training_set = pd.read_csv('boston_train.csv')
test_set = pd.read_csv('boston_test.csv')
prediction_set = pd.read_csv('boston_predict.csv')

training_set.head()
training_set.tail()
training_set.shape

FEATURES:['CRIM', 'ZN', 'INDUS', 'NOX', 'RM', 'AGE', 'TAX', 'PTRATIO']
LABEL = 'MEDV'  

cor = training_set.corr()
plt.figure(figsize=(16,10))
sns.heatmap(cor, annot=True)

plt.figure(figsize=(16,10))
sns.heatmap(training_set.corr(), annot=True)

X_train = training_set[['CRIM', 'ZN', 'INDUS', 'NOX', 'RM', 'AGE', 'TAX', 'PTRATIO']]
Y_train = training_set['MEDV']

## Preprocessing (Mark as markdown)
# Normalize the data
from sklearn.preprocessing import normalize, scale
X_scale = scale(X_train)
X_norm = normalize(X_scale)

X_scale

## Build and Train Model (Mark as markdown)
def build_model():
    # Define the model - Sequential Model
    # Activation function - ReLU, tf.nn.sigmoid
    model = keras.Sequential([
    layers.Dense(64, activation = tf.nn.relu ,
                 input_shape = [len(X_train.keys())]),
    layers.Dense(32, activation = tf.nn.relu),
    layers.Dense(1)
 ])
    #Model Optimizer - To optimize loss function
    optimizer = tf.keras.optimizers.RMSprop(0.001)
    model.compile(loss ='mean_squared_error',
                  optimizer = optimizer,
                  metrics = ['mean_absolute_error',
                            'mean_squared_error'])
    return model
    
model = build_model()
model.summary()

EPOCHS = 1000
history = model.fit(X_norm, Y_train,
  epochs = EPOCHS, validation_split = 0.2, verbose = 0)
  
## Testing the Model (Mark as markdown)
test_set.head()
X_test = test_set[['CRIM', 'ZN', 'INDUS', 'NOX', 'RM', 'AGE', 'TAX', 'PTRATIO']]
Y_test = test_set['MEDV']

X_scale_test = scale(X_test)
X_norm_test = normalize(X_scale_test)

X_scale_test = scale(X_test)
X_norm_test = normalize(X_scale_test)

yhat = model.predict(X_norm_test)

from sklearn.metrics import mean_squared_error, r2_score
MSE = mean_squared_error(Y_test, yhat)
print(MSE)
r2_score(Y_test, yhat)

#observe the result carefully...
